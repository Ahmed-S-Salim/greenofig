import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { supabase } from '@/lib/customSupabaseClient';
import { toast } from '@/components/ui/use-toast';
import {
  Home,
  Plus,
  Edit,
  Trash2,
  Eye,
  EyeOff,
  ArrowUp,
  ArrowDown,
  Save,
  X,
  Image as ImageIcon,
  Type,
  Layout
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

const SECTION_TYPES = [
  { value: 'hero', label: 'Hero Section', icon: Layout, description: 'Main banner with CTA' },
  { value: 'features', label: 'Features Overview', icon: Type, description: 'Highlight key features' },
  { value: 'cta', label: 'Call to Action', icon: Type, description: 'Conversion section' },
  { value: 'stats', label: 'Statistics', icon: Type, description: 'Numbers and metrics' },
  { value: 'process', label: 'How It Works', icon: Type, description: 'Step-by-step process' },
];

const CTA_TYPES = [
  { value: 'primary', label: 'Primary' },
  { value: 'secondary', label: 'Secondary' },
  { value: 'outline', label: 'Outline' },
];

const HomepageManager = () => {
  const [sections, setSections] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingSection, setEditingSection] = useState(null);
  const [isEditorOpen, setIsEditorOpen] = useState(false);
  const [deleteConfirmId, setDeleteConfirmId] = useState(null);

  // Editor state
  const [formData, setFormData] = useState({
    section_type: 'hero',
    section_order: 0,
    is_active: true,
    title: '',
    subtitle: '',
    description: '',
    image_url: '',
    video_url: '',
    background_image_url: '',
    cta_text: '',
    cta_link: '',
    cta_type: 'primary',
    background_color: '',
    text_color: '',
  });

  useEffect(() => {
    fetchSections();
  }, []);

  const fetchSections = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('homepage_content')
        .select('*')
        .order('section_order', { ascending: true });

      if (error) throw error;
      setSections(data || []);
    } catch (error) {
      console.error('Error fetching homepage sections:', error);
      toast({
        title: 'Error',
        description: 'Failed to load homepage sections',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleOpenEditor = (section = null) => {
    if (section) {
      setEditingSection(section);
      setFormData({
        section_type: section.section_type || 'hero',
        section_order: section.section_order || 0,
        is_active: section.is_active !== false,
        title: section.title || '',
        subtitle: section.subtitle || '',
        description: section.description || '',
        image_url: section.image_url || '',
        video_url: section.video_url || '',
        background_image_url: section.background_image_url || '',
        cta_text: section.cta_text || '',
        cta_link: section.cta_link || '',
        cta_type: section.cta_type || 'primary',
        background_color: section.background_color || '',
        text_color: section.text_color || '',
      });
    } else {
      setEditingSection(null);
      setFormData({
        section_type: 'hero',
        section_order: sections.length,
        is_active: true,
        title: '',
        subtitle: '',
        description: '',
        image_url: '',
        video_url: '',
        background_image_url: '',
        cta_text: '',
        cta_link: '',
        cta_type: 'primary',
        background_color: '',
        text_color: '',
      });
    }
    setIsEditorOpen(true);
  };

  const handleCloseEditor = () => {
    setIsEditorOpen(false);
    setEditingSection(null);
  };

  const handleSaveSection = async () => {
    try {
      if (!formData.title) {
        toast({
          title: 'Validation Error',
          description: 'Title is required',
          variant: 'destructive',
        });
        return;
      }

      const sectionData = {
        ...formData,
        updated_at: new Date().toISOString(),
      };

      if (editingSection) {
        // Update existing section
        const { error } = await supabase
          .from('homepage_content')
          .update(sectionData)
          .eq('id', editingSection.id);

        if (error) throw error;

        toast({
          title: 'Success',
          description: 'Section updated successfully',
        });
      } else {
        // Create new section
        const { error } = await supabase
          .from('homepage_content')
          .insert([sectionData]);

        if (error) throw error;

        toast({
          title: 'Success',
          description: 'Section created successfully',
        });
      }

      handleCloseEditor();
      fetchSections();
    } catch (error) {
      console.error('Error saving section:', error);
      toast({
        title: 'Error',
        description: `Failed to save section: ${error.message}`,
        variant: 'destructive',
      });
    }
  };

  const handleDeleteSection = async (id) => {
    try {
      const { error } = await supabase
        .from('homepage_content')
        .delete()
        .eq('id', id);

      if (error) throw error;

      toast({
        title: 'Success',
        description: 'Section deleted successfully',
      });
      fetchSections();
    } catch (error) {
      console.error('Error deleting section:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete section',
        variant: 'destructive',
      });
    } finally {
      setDeleteConfirmId(null);
    }
  };

  const handleToggleActive = async (section) => {
    try {
      const { error } = await supabase
        .from('homepage_content')
        .update({ is_active: !section.is_active })
        .eq('id', section.id);

      if (error) throw error;

      toast({
        title: 'Success',
        description: `Section ${!section.is_active ? 'activated' : 'deactivated'}`,
      });
      fetchSections();
    } catch (error) {
      console.error('Error toggling section:', error);
      toast({
        title: 'Error',
        description: 'Failed to update section',
        variant: 'destructive',
      });
    }
  };

  const handleMoveSection = async (section, direction) => {
    try {
      const currentOrder = section.section_order;
      const newOrder = direction === 'up' ? currentOrder - 1 : currentOrder + 1;

      // Find the section to swap with
      const swapSection = sections.find(s => s.section_order === newOrder);

      if (!swapSection) return;

      // Swap the orders
      await supabase
        .from('homepage_content')
        .update({ section_order: newOrder })
        .eq('id', section.id);

      await supabase
        .from('homepage_content')
        .update({ section_order: currentOrder })
        .eq('id', swapSection.id);

      fetchSections();
    } catch (error) {
      console.error('Error moving section:', error);
      toast({
        title: 'Error',
        description: 'Failed to reorder section',
        variant: 'destructive',
      });
    }
  };

  const getSectionTypeLabel = (type) => {
    return SECTION_TYPES.find(t => t.value === type)?.label || type;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Home className="w-6 h-6" />
            Homepage Manager
          </h2>
          <p className="text-sm text-muted-foreground mt-1">
            Manage homepage sections and content
          </p>
        </div>
        <Button onClick={() => handleOpenEditor()}>
          <Plus className="w-4 h-4 mr-2" />
          Add Section
        </Button>
      </div>

      {/* Sections List */}
      <div className="space-y-4">
        {sections.length === 0 ? (
          <Card>
            <CardContent className="py-12 text-center">
              <Home className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground">No homepage sections yet</p>
              <Button onClick={() => handleOpenEditor()} className="mt-4">
                <Plus className="w-4 h-4 mr-2" />
                Create First Section
              </Button>
            </CardContent>
          </Card>
        ) : (
          sections.map((section, index) => (
            <motion.div
              key={section.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
            >
              <Card className={!section.is_active ? 'opacity-60' : ''}>
                <CardContent className="p-6">
                  <div className="flex items-start justify-between gap-4">
                    {/* Section Info */}
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <span className="px-2 py-1 text-xs font-medium rounded-full bg-primary/10 text-primary">
                          {getSectionTypeLabel(section.section_type)}
                        </span>
                        {!section.is_active && (
                          <span className="px-2 py-1 text-xs font-medium rounded-full bg-muted text-muted-foreground">
                            Inactive
                          </span>
                        )}
                      </div>
                      <h3 className="text-lg font-semibold mb-1">{section.title}</h3>
                      {section.subtitle && (
                        <p className="text-sm text-muted-foreground mb-2">{section.subtitle}</p>
                      )}
                      {section.description && (
                        <p className="text-sm text-muted-foreground line-clamp-2">{section.description}</p>
                      )}
                      {section.cta_text && (
                        <div className="mt-3 flex items-center gap-2 text-sm">
                          <span className="text-muted-foreground">CTA:</span>
                          <span className="font-medium">{section.cta_text}</span>
                          <span className="text-muted-foreground">→</span>
                          <span className="text-primary">{section.cta_link}</span>
                        </div>
                      )}
                    </div>

                    {/* Actions */}
                    <div className="flex items-center gap-2">
                      {/* Move buttons */}
                      <div className="flex flex-col gap-1">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleMoveSection(section, 'up')}
                          disabled={index === 0}
                          className="h-6 w-6"
                        >
                          <ArrowUp className="w-3 h-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleMoveSection(section, 'down')}
                          disabled={index === sections.length - 1}
                          className="h-6 w-6"
                        >
                          <ArrowDown className="w-3 h-3" />
                        </Button>
                      </div>

                      {/* Toggle active */}
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleToggleActive(section)}
                      >
                        {section.is_active ? (
                          <Eye className="w-4 h-4" />
                        ) : (
                          <EyeOff className="w-4 h-4" />
                        )}
                      </Button>

                      {/* Edit */}
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleOpenEditor(section)}
                      >
                        <Edit className="w-4 h-4" />
                      </Button>

                      {/* Delete */}
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setDeleteConfirmId(section.id)}
                      >
                        <Trash2 className="w-4 h-4 text-destructive" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))
        )}
      </div>

      {/* Editor Dialog */}
      <Dialog open={isEditorOpen} onOpenChange={setIsEditorOpen}>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              {editingSection ? 'Edit Section' : 'Create New Section'}
            </DialogTitle>
            <DialogDescription>
              Configure the homepage section content and appearance
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6 py-4">
            {/* Section Type & Order */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="section_type">Section Type</Label>
                <Select
                  value={formData.section_type}
                  onValueChange={(value) => setFormData({ ...formData, section_type: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {SECTION_TYPES.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="section_order">Display Order</Label>
                <Input
                  id="section_order"
                  type="number"
                  value={formData.section_order}
                  onChange={(e) => setFormData({ ...formData, section_order: parseInt(e.target.value) || 0 })}
                />
              </div>
            </div>

            {/* Active Status */}
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="is_active">Active Status</Label>
                <p className="text-xs text-muted-foreground">Show this section on the homepage</p>
              </div>
              <Switch
                id="is_active"
                checked={formData.is_active}
                onCheckedChange={(checked) => setFormData({ ...formData, is_active: checked })}
              />
            </div>

            {/* Title */}
            <div className="space-y-2">
              <Label htmlFor="title">Title *</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="Enter section title"
              />
            </div>

            {/* Subtitle */}
            <div className="space-y-2">
              <Label htmlFor="subtitle">Subtitle</Label>
              <Input
                id="subtitle"
                value={formData.subtitle}
                onChange={(e) => setFormData({ ...formData, subtitle: e.target.value })}
                placeholder="Enter section subtitle"
              />
            </div>

            {/* Description */}
            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Enter section description"
                rows={3}
              />
            </div>

            {/* Media */}
            <div className="space-y-4">
              <Label className="flex items-center gap-2">
                <ImageIcon className="w-4 h-4" />
                Media & Images
              </Label>

              <div className="space-y-3">
                <div className="space-y-2">
                  <Label htmlFor="image_url" className="text-xs">Image URL</Label>
                  <Input
                    id="image_url"
                    value={formData.image_url}
                    onChange={(e) => setFormData({ ...formData, image_url: e.target.value })}
                    placeholder="https://..."
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="background_image_url" className="text-xs">Background Image URL</Label>
                  <Input
                    id="background_image_url"
                    value={formData.background_image_url}
                    onChange={(e) => setFormData({ ...formData, background_image_url: e.target.value })}
                    placeholder="https://..."
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="video_url" className="text-xs">Video URL</Label>
                  <Input
                    id="video_url"
                    value={formData.video_url}
                    onChange={(e) => setFormData({ ...formData, video_url: e.target.value })}
                    placeholder="https://..."
                  />
                </div>
              </div>
            </div>

            {/* CTA */}
            <div className="space-y-4">
              <Label>Call to Action</Label>

              <div className="grid grid-cols-2 gap-3">
                <div className="space-y-2">
                  <Label htmlFor="cta_text" className="text-xs">Button Text</Label>
                  <Input
                    id="cta_text"
                    value={formData.cta_text}
                    onChange={(e) => setFormData({ ...formData, cta_text: e.target.value })}
                    placeholder="Get Started"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="cta_type" className="text-xs">Button Style</Label>
                  <Select
                    value={formData.cta_type}
                    onValueChange={(value) => setFormData({ ...formData, cta_type: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {CTA_TYPES.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="cta_link" className="text-xs">Button Link</Label>
                <Input
                  id="cta_link"
                  value={formData.cta_link}
                  onChange={(e) => setFormData({ ...formData, cta_link: e.target.value })}
                  placeholder="/signup"
                />
              </div>
            </div>

            {/* Colors */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="background_color">Background Color</Label>
                <Input
                  id="background_color"
                  value={formData.background_color}
                  onChange={(e) => setFormData({ ...formData, background_color: e.target.value })}
                  placeholder="#FFFFFF"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="text_color">Text Color</Label>
                <Input
                  id="text_color"
                  value={formData.text_color}
                  onChange={(e) => setFormData({ ...formData, text_color: e.target.value })}
                  placeholder="#000000"
                />
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={handleCloseEditor}>
              <X className="w-4 h-4 mr-2" />
              Cancel
            </Button>
            <Button onClick={handleSaveSection}>
              <Save className="w-4 h-4 mr-2" />
              Save Section
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation */}
      <AlertDialog open={!!deleteConfirmId} onOpenChange={() => setDeleteConfirmId(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Section</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this section? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => handleDeleteSection(deleteConfirmId)}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default HomepageManager;
